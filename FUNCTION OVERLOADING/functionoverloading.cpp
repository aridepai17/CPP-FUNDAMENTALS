// Function Overloading is when we have multiple functions with same name but different parameters.
// Function Overloading helps to reduce code redundancy and complexity.
/*
Function Overloading also helps to create polymorphism.
Polymorphism is the ability of an  object to take on many forms.
*/ 
// For pointers and references arguments, qualifiers participate in overload.
// Return type is ignored.
// Different implementations with same behaviour.
// Resolved at compile time. Also called static polymorphism.

#include <iostream>
int Add(int a, int b){
    return a + b;
}

double Add(double a, double b){
    return a + b;
}

void Print (int x){
    std::cout << x << std::endl;
}

void Print (double x){
    std::cout << x << std::endl;
}

int main(){
    using namespace std;
    int result = Add(1, 2);
    cout << result << endl;
    Add(3.1, 4.2);
    Print(1);
    Print(7.7);
    return 0;
}

/*
NAME MANGLING 
-> Unique names generated by the compiler for functions.
-> Allows linker to link the call with the correct overloaded function.
-> Avoids name collisions.
-> Helps in debugging.
-> C++ functions are not callable from C code.
*/

/*
EXTERN C
-> Compiler directive applied on global functions and variables.
-> Suppresses name mangling of the type on which it is applied.
-> Can be applied only to one function in a set of oveloaded functions.
-> Allows C++ functions to be callable from C code or other languages.

SYNTAX
// Apply on function declaration and definition

// in .h file
extern "C" <function declaration>;

// in .cpp file
extern "C" <function definition>;{
    statements;
}
*/